@mixin e($element){
	&__#{$element}{
		@content; 
	}
}

@mixin m($modifier){
	&--#{$modifier}{
		@content; 
	}
}


$style-short-name:(
	padding: ".p",
	margin: ".m",
	font-color: ".fc",
	border: ".b",
	border-color:".bc",
	border-radius: ".br"
	);

$position:(	
	cardnial:(
		default: "",
		top: t,
		left: l,
		right: r,
		bottom: b
		),
	corner:(
		default: "",
		top-right: tr,
		bottom-right: br,
		bottom-left: bl,
		top-left: tl
		)
	);
$values:(
	positive:(
		0:0,
		1:1px,
		2:.25,
		3:.5,
		4:1,
		5:2
		),
	negative:(
		n1: -1px,
		n2: -.25,
		n3: -.5,
		n4: -1,
		n5: -2
		),
	radius:(
		0:0,
		1:1,
		2:3,
		3:5,
		4:10,
		5:100
		),
	unitless-positive:(
		0:0,
		1:1,
		2:2,
		3:3,
		4:4,
		5:5
		),
	unitless-negative:(
		n1:-1,
		n2:-2,
		n3:-3,
		n4:-4,
		n5:-5
		),
	line-height:(
		0:0,
		1:1,
		2:1.45,
		3:1.655,
		4:1.75,
		5:2,
		)
	);
/*
 Child Template Sub

 This is how templates can stack inside of other templates
 
 markup:
 <span class="child sub">child</span>


 Styleguide 99.2.8
*/
$style-definition:(
	margin:(
		short-name:'.m',
		css-style:'margin',
		long-name:'.margin',
		),
	margin-top:(
		short-name:'.mt',
		css-style:'margin-top',
		long-name:'.margin-top',
		),
	margin-bottom:(
		short-name:'.mb',
		css-style:'margin-bottom',
		long-name:'.margin-bottom',
		),
	margin-left:(
		short-name:'.ml',
		css-style:'margin-left',
		long-name:'.margin-left',
		),
	margin-right:(
		short-name:'.mr',
		css-style:'margin-right',
		long-name:'.margin-right',
		),
	padding:(
		short-name:'.p',
		css-style:'padding',
		long-name:'.padding',
		),
	padding-top:(
		short-name:'.pt',
		css-style:'padding-top',
		long-name:'.padding-top',
		),
	padding-bottom:(
		short-name:'.pb',
		css-style:'padding-bottom',
		long-name:'.padding-bottom',
		),
	padding-left:(
		short-name:'.pl',
		css-style:'padding-left',
		long-name:'.padding-left',
		),
	padding-right:(
		short-name:'.pr',
		css-style:'padding-right',
		long-name:'.padding-right',
		),
	border-left-width:(
		short-name:'.blw',
		css-style:'border-left-width',
		long-name:'.border-left-width',
		),	
	line-height:(
		short-name:'.lh',
		css-style:'line-height',
		long-name:'.line-height',
		),	
	font-size:(
		short-name:'.fs',
		css-style:'font-size',
		long-name:'.font-size',
		)
);

@mixin size-loop( $style-name:null , $size-variation:null, $multiplier, $breakpoint:"" ){
	$labels:		map-get($style-definition, $style-name);
	$short-name:	map-get($labels, short-name); 	@debug $short-name; 
	$long-name:		map-get($labels, long-name); 	@debug $long-name; 
	$style:			map-get($labels, css-style); 	@debug $style; 
	@if $size-variation == null {@debug "size-loop mixin has errored. $size-variation can not be nulll";}
	// @else if $multiplier == null {@debug "size-loop mixin has errored. $multiplier can not be nulll";}
	@else{
		$sizes: map-get($values,$size-variation); 
		@debug $sizes;
		@each  $val-name, $val in $sizes {
			@debug $val-name;
			@debug $val val;
			@debug  $multiplier multiplier;
			$unit:0;
			@if $val == 1px{
				$unit:1px
			}
			@else if $val == -1px{
				$unit: -1px
			}
			@else{
				$unit: $multiplier * $val; 
			}
			@debug $unit;

			#{ $long-name }_#{ $val-name }#{$breakpoint}{
				#{$style}:$unit;	
			}
		}		
	}
}




